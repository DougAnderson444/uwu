use crate::ast::{Stmt, Expr, Program, Ident, Literal, Number};

/// A compiler will hold the AST of the input source.
pub struct Compiler {
    ast: Program,
}

/// Compiler implementation
impl Compiler {
    /// Create a new compiler instance.
    pub fn new(ast: Program) -> Self {
        Self { ast }
    }
    
    /// Execute AST to JS codegen. Returns javascript code.
    pub fn compile(&self) -> String {
        let mut source = "// Generated by uwu compiler v0.0\n".to_string();
        for stmt in &self.ast {
            if stmt == &Stmt::Blank {
                // PERF: swith to push() instead?
                source.push_str("\n");
                break;
            }

            let block: Option<String> = match stmt {
                Stmt::Expr(expr) => self.compile_expr(expr),
                _ => None,
            };

            if block.is_some() { 
                source.push_str(&block.unwrap()); 
            }
        }
        source
    }

    fn compile_expr(&self, expr: &Expr) -> Option<String> {
        let mut source = String::new();
        match expr {
            Expr::Let(ident, expr) => {
                let value = match self.compile_expr(expr) {
                    Some(value) => value,
                    None => return None,
                };
                let Ident(name) = ident;
                source.push_str(&format!("let {} = {}; \n", name, value));
            },
            Expr::Literal(lit) => {
                source.push_str(&self.compile_literal(lit)?);
            },
            _ => return None,
        }
        Some(source)
    }

    fn compile_literal(&self, literal: &Literal) -> Option<String> {
        match literal {
            Literal::Number(val) => Some(self.compile_number(val)),
            _ => None,
        }
    }

    fn compile_number(&self, val: &Number) -> String {
        match val {
            Number::Int(int) => format!("{}", int),
            Number::Float(flt) => format!("{}", flt),
        }
    }
}

#[cfg(test)]
mod tests {
    use crate::compiler::*;
    use crate::parser::Parser;
    use crate::tokenizer::Lexer;
    #[test]
    fn compile_decl() {
        let source = "a = 1";
        let mut parser = Parser::new(Lexer::new(&source));
        let ast = parser.parse();
        let compiler = Compiler::new(ast);
        assert_eq!(compiler.compile(), "// Generated by uwu compiler v0.0\nlet a = 1; \n");
    }
}